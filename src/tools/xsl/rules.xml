<?xml version="1.0" encoding="UTF-8"?>

<!--
// This file is part of XmlPlus package
// 
// Copyright (C)   2010   Satya Prakash Tripathi
//
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
-->

<root>

  <ruleGroup id="ComplexTypeDefinition.PropertiesCorrect">
    <title>Schema Component Constraint: Complex Type Definition Properties Correct</title>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.1">
  The values of the properties of a complex type definition must be as described in the property tableau in The Complex Type Definition Schema Component (§3.4.1), modulo the impact of Missing Sub-components (§5.3).
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.2">
  If the {base type definition} is a simple type definition, the {derivation method} must be extension.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.3">
  Circular definitions are disallowed, except for the ·ur-type definition·. That is, it must be possible to reach the ·ur-type definition· by repeatedly following the {base type definition}.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.4">
  Two distinct attribute declarations in the {attribute uses} must not have identical {name}s and {target namespace}s.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.5">
  Two distinct attribute declarations in the {attribute uses} must not have {type definition}s which are or are derived from ID.
    </rule>
  </ruleGroup>



  <ruleGroup id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK">

    <title> Schema Representation Constraint: Complex Type Definition Representation OK </title>
    
    <!--
      In addition to the conditions imposed on <complexType> element information items by the schema for schema documents, all of the following also apply:
    -->
    
    <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.1">
  If the &lt;simpleContent&gt; alternative is chosen, the &lt;complexType&gt; element must not have mixed = true.
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.2">
  If &lt;openContent&gt; is present and has mode ≠ 'none', then there must be an &lt;any&gt; among the [children] of &lt;openContent&gt;
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.3">
  If &lt;openContent&gt; is present and has mode = 'none', then there must not be an &lt;any&gt; among the [children] of &lt;openContent&gt;
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.4">
  If the &lt;complexContent&gt; alternative is chosen and the mixed [attribute] is present on both &lt;complexType&gt; and &lt;complexContent&gt; then ·actual values· of those [attributes] must be the same.
    </rule>

  </ruleGroup>


<!--
Schema Representation Constraint: Attribute Declaration Representation OK
In addition to the conditions imposed on <attribute> element information items by the schema for schema documents, all of the following also apply:
1 default and fixed must not both be present.
2 If default and use are both present, use must have the ·actual value· optional.
3 If the item's parent is not <schema>, then all of the following must be true:
3.1 One of ref or name is present, but not both.
3.2 If ref is present, then all of <simpleType>, form and type are absent.
4 The type attribute and a <simpleType> child element must not both be present.
5 If fixed and use are both present, use must not have the ·actual value· prohibited.
6 If the targetNamespace attribute is present then all of the following must be true:
6.1 The name attribute is present.
6.2 The form attribute is absent.
6.3 If the ancestor <schema> does not have a targetNamespace [attribute] or its ·actual value· is different from the ·actual value· of targetNamespace of <attribute>, then all of the following are true:
6.3.1 <attribute> has <complexType> as an ancestor
6.3.2 There is a <restriction> ancestor between the <attribute> and the nearest <complexType> ancestor, and the ·actual value· of the base [attribute] of <restriction> does not ·match· the name of ·xs:anyType·.


-->

</root>

