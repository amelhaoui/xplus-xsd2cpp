<?xml version="1.0" encoding="UTF-8"?>

<!--
// This file is part of XmlPlus package
// 
// Copyright (C)   2010   Satya Prakash Tripathi
//
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
-->

<root>

  <ruleGroup id="ComplexTypeDefinition.PropertiesCorrect">
    <title>Schema Component Constraint: Complex Type Definition Properties Correct</title>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.1">
  The values of the properties of a complex type definition must be as described in the property tableau in The Complex Type Definition Schema Component (§3.4.1), modulo the impact of Missing Sub-components (§5.3).
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.2">
  If the {base type definition} is a simple type definition, the {derivation method} must be extension.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.3">
  Circular definitions are disallowed, except for the ·ur-type definition·. That is, it must be possible to reach the ·ur-type definition· by repeatedly following the {base type definition}.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.4">
  Two distinct attribute declarations in the {attribute uses} must not have identical {name}s and {target namespace}s.
    </rule>
    
    <rule id="ComplexTypeDefinition.PropertiesCorrect.5">
  Two distinct attribute declarations in the {attribute uses} must not have {type definition}s which are or are derived from ID.
    </rule>
  </ruleGroup>



  <ruleGroup id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK">

    <title> Schema Representation Constraint: Complex Type Definition Representation OK </title>
    
    <!--
      In addition to the conditions imposed on <complexType> element information items by the schema for schema documents, all of the following also apply:
    -->
    
    <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.1">
  If the &lt;simpleContent&gt; alternative is chosen, the &lt;complexType&gt; element must not have mixed = true.
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.2">
  If &lt;openContent&gt; is present and has mode ≠ 'none', then there must be an &lt;any&gt; among the [children] of &lt;openContent&gt;
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.3">
  If &lt;openContent&gt; is present and has mode = 'none', then there must not be an &lt;any&gt; among the [children] of &lt;openContent&gt;
   </rule>
   <rule id="XSD1.1.ComplexTypeDefinition.XMLRepresentationOK.4">
  If the &lt;complexContent&gt; alternative is chosen and the mixed [attribute] is present on both &lt;complexType&gt; and &lt;complexContent&gt; then ·actual values· of those [attributes] must be the same.
    </rule>

  </ruleGroup>




  <ruleGroup id="AttributeDeclarationRepresentationOK">

    <title> Schema Representation Constraint: Attribute Declaration Representation OK </title>
    
    <rule id="AttributeDeclarationRepresentationOK.1">
  default and fixed must not both be present.
    </rule>
    
    <rule id="AttributeDeclarationRepresentationOK.2">
  If default and use are both present, use must have the ·actual value· optional.
    </rule>
    
    <rule id="AttributeDeclarationRepresentationOK.3">
  If the item's parent is not &lt;schema&gt;, then all of the following must be true:
    1  One of ref or name is present, but not both.
    2  If ref is present, then all of &lt;simpleType&gt;, form and type are absent.
    </rule>
    
    <rule id="AttributeDeclarationRepresentationOK.4">
  The type attribute and a &lt;simpleType&gt; child element must not both be present.
    </rule>
    
    <rule id="AttributeDeclarationRepresentationOK.5">
  If fixed and use are both present, use must not have the ·actual value· prohibited.
    </rule>
    
    <rule id="AttributeDeclarationRepresentationOK.6">
  If the targetNamespace attribute is present then all of the following must be true:
    1  The name attribute is present.
    2  The form attribute is absent.
    3  If the ancestor &lt;schema&gt; does not have a targetNamespace [attribute] or its ·actual value· is different from the ·actual value· of targetNamespace of &lt;attribute&gt;, then all of the following are true:
      3.1  &lt;attribute&gt; has &lt;complexType&gt; as an ancestor
      3.2  There is a &lt;restriction&gt; ancestor between the &lt;attribute&gt; and the nearest &lt;complexType&gt; ancestor, and the ·actual value· of the base [attribute] of &lt;restriction&gt; does not ·match· the name of ·xs:anyType·.    
    </rule>
    
  </ruleGroup>


  <ruleGroup id="ElementDeclarationRepresentationOK">

    <title> Schema Representation Constraint: Element Declaration Representation OK </title>
    
    <rule id="ElementDeclarationRepresentationOK.1">
  default and fixed are not both present.
    </rule>

    <rule id="ElementDeclarationRepresentationOK.2">
  If the item's parent is not &lt;schema&gt; then all of the following are true:
    1  One of ref or name is present, but not both.
    2  If ref is present, then all of &lt;complexType&gt; &lt;simpleType&gt; &lt;key&gt; &lt;keyref&gt; &lt;unique&gt; nillable, default, fixed, form, block and type are absent, i.e. only minOccurs, maxOccurs, id and &lt;annotation&gt; are allowed to appear together with ref.
    </rule>

    <rule id="ElementDeclarationRepresentationOK.3">
  The &lt;element&gt; element does not have both a &lt;simpleType&gt; or &lt;complexType&gt; child and a type attribute.
    </rule>

    <rule id="ElementDeclarationRepresentationOK.4">
  If targetNamespace is present then all of the following are true:
    1 name is present.
    2 form is not present.
    3 If the ancestor &lt;schema&gt; does not have a targetNamespace [attribute] or its ·actual value· is different from the ·actual value· of targetNamespace of &lt;element>, then all of the following are true:
      3.1 &lt;element&gt; has &lt;complexType&gt; as an ancestor
      3.2 There is a &lt;restriction&gt; ancestor between the &lt;element&gt; and the nearest &lt;complexType&gt; ancestor, and the ·actual value· of the base [attribute] of &lt;restriction&gt; does not ·match· the name of ·xs:anyType·.    
    </rule>

    <rule id="ElementDeclarationRepresentationOK.5">
  Every &lt;alternative&gt; element but the last has a test [attribute]; the last &lt;alternative&gt; element may have such an [attribute].
    </rule>

  </ruleGroup>


  <!--
    unmapped : not clear, where in spec are they mentioned
  -->
  <ruleGroup id="ElementDeclarationRepresentationOK.unmapped">

    <title> Schema Representation Constraint: Element Declaration Representation OK - Unmapped </title>
    
    <rule id="ElementDeclarationRepresentationOK.unmapped.1">
    The allowed values for abstract attribute on Element Declaration, are {true, false}
    </rule>
    
    <rule id="ElementDeclarationRepresentationOK.unmapped.2">
    The allowed values for nillable attribute on Element Declaration, are {true, false}
    </rule>
    
    <rule id="ElementDeclarationRepresentationOK.unmapped.3">
    The allowed values for abstract attribute on Element Declaration, are {restriction, extension}
    </rule>
    
    <rule id="ElementDeclarationRepresentationOK.unmapped.4">
    The allowed values for abstract attribute on Element Declaration, are {restriction, extension}
    </rule>
    
    <rule id="ElementDeclarationRepresentationOK.unmapped.5">
    The allowed values for abstract attribute on Element Declaration, are {qualified, unqualified}
    </rule>

  </ruleGroup>



  <ruleGroup id="ComplexTypeDefinition.DerivationValid.extension">
    <title> Schema Component Constraint: ComplexTypeDefinition Derivation Valid (Extension)</title>
    
    <rule id="ComplexTypeDefinition.DerivationValid.extension.1">
    For every complex type T with {base type definition} B where T.{derivation method} = extension
    
    1) If B is a complex type definition, then  all of the following are true:
        1.1)  B.{final} does not contain extension.
        ....
        .....
      
      (refer to complete set of rules at http://www.w3.org/TR/xmlschema11-1/#sec-cos-ct-extends)
    </rule>


    <rule id="ComplexTypeDefinition.DerivationValid.extension.2">
    For every complex type T with {base type definition} B where T.{derivation method} = extension

    2) If B is a simple type definition, then  all of the following are true:
        2.1)  T.{content type}.{variety} = simple and T.{content type}.{simple type definition} = B.
        2.2)  B.{final} does not contain extension.
      
      (refer to complete set of rules at http://www.w3.org/TR/xmlschema11-1/#sec-cos-ct-extends)
    </rule>
    
    
  </ruleGroup>

  <ruleGroup id="ComplexTypeDefinition.DerivationValid.restriction">
    <title> Schema Component Constraint: ComplexTypeDefinition Derivation Valid (Restriction)</title>
    
    <rule id="ComplexTypeDefinition.DerivationValid.restriction.all">
    For every complex type T with {base type definition} B where T.{derivation method} = restriction, all of the following must be true:

    1) B is a complex type definition whose {final} does not contain restriction.
    2) One or more of the following is true:
       ...
       ....

      (refer to complete set of rules at http://www.w3.org/TR/xmlschema11-1/#sec-derivation-ok-restriction)
    </rule>
  </ruleGroup>


</root>

